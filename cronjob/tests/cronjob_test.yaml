suite: CronJob Test
templates:
  - cronjob.yaml
tests:
  - it: should render an argo cron workflow with default values
    values:
      - ./values/cronjob/argo.yaml
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: CronWorkflow
      - equal:
          path: spec.timezone
          value: "Etc/UTC"
      - equal:
          path: spec.successfulJobsHistoryLimit
          value: 3
      - equal:
          path: spec.failedJobsHistoryLimit
          value: 1
      - equal:
          path: spec.concurrencyPolicy
          value: "Allow"
      - equal:
          path: spec.suspend
          value: false
      - equal:
          path: spec.schedule
          value: "1 * * * *"
      - equal:
          path: spec.workflowSpec.templates[1].container.command
          value:
            - bundle
            - exec
            - rails
            - test
      - equal:
          path: spec.workflowSpec.templates[1].container.image
          value: "test/testImage:latest"

  - it: should render an argo cron workflow with custom values
    values:
      - ./values/cronjob/argo.yaml
    set:
      timezone: Asia/Taipei
      job:
        history:
          success: 99
          failed: 99
        concurrency: Forbid
      suspend: true
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: CronWorkflow
      - equal:
          path: spec.timezone
          value: "Asia/Taipei"
      - equal:
          path: spec.successfulJobsHistoryLimit
          value: 99
      - equal:
          path: spec.failedJobsHistoryLimit
          value: 99
      - equal:
          path: spec.concurrencyPolicy
          value: "Forbid"
      - equal:
          path: spec.suspend
          value: true
      - equal:
          path: spec.schedule
          value: "1 * * * *"
      - equal:
          path: spec.workflowSpec.templates[1].container.command
          value:
            - bundle
            - exec
            - rails
            - test
      - equal:
          path: spec.workflowSpec.templates[1].container.image
          value: "test/testImage:latest"

  - it: should render a k8s cron job with default values
    values:
      - ./values/cronjob/k8s.yaml
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: CronJob
      - equal:
          path: spec.successfulJobsHistoryLimit
          value: 3
      - equal:
          path: spec.failedJobsHistoryLimit
          value: 1
      - equal:
          path: spec.concurrencyPolicy
          value: "Allow"
      - equal:
          path: spec.suspend
          value: false
      - equal:
          path: spec.schedule
          value: "0 * * * *"
      - equal:
          path: spec.jobTemplate.spec.template.spec.containers[0].image
          value: "test/testImage:latest:v1.0.0"
      - equal:
          path: spec.jobTemplate.spec.template.spec.containers[0].command
          value:
            - /app/run.sh

  - it: should render a k8s cron job with custom values
    values:
      - ./values/cronjob/k8s.yaml
    set:
      job:
        history:
          success: 99
          failed: 99
        concurrency: Forbid
      suspend: true
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: CronJob
      - equal:
          path: spec.successfulJobsHistoryLimit
          value: 99
      - equal:
          path: spec.failedJobsHistoryLimit
          value: 99
      - equal:
          path: spec.concurrencyPolicy
          value: "Forbid"
      - equal:
          path: spec.suspend
          value: true
      - equal:
          path: spec.schedule
          value: "0 * * * *"
      - equal:
          path: spec.jobTemplate.spec.template.spec.containers[0].image
          value: "test/testImage:latest:v1.0.0"
      - equal:
          path: spec.jobTemplate.spec.template.spec.containers[0].command
          value:
            - /app/run.sh

  - it: should render an argo cron workflow when exitNotifications.slackApp exists and mention is null
    values:
      - ./values/cronjob/argo.yaml
    set:
      exitNotifications:
        slackApp:
          mention: ~
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: CronWorkflow

  - it: should render an argo cron workflow when exitNotifications.slackApp.mention exists and onSuccess is null
    values:
      - ./values/cronjob/argo.yaml
    set:
      exitNotifications:
        slackApp:
          mention:
            onSuccess: ~
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: CronWorkflow

  - it: should render an argo cron workflow when exitNotifications.slackApp.mention exists and onFailure is null
    values:
      - ./values/cronjob/argo.yaml
    set:
      exitNotifications:
        slackApp:
          mention:
            onFailure: ~
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: CronWorkflow

  - it: should render an argo cron workflow when runbooks contain single or/and double quotes
    values:
      - ./values/cronjob/argo.yaml
    set:
      exitNotifications:
        slackApp:
          runbook:
            - testing double quotes " something "
            - testing single quotes ' something '
    asserts:
      - equal:
          path: spec.workflowSpec.templates[6].name
          value: "notice-slack-app-failed"
      - matchRegex:
          path: spec.workflowSpec.templates[6].container.args[0]
          pattern: >
            .*"text":\s*"\*Runbook\*\\ntesting double quotes \\" something \\"\\ntesting single quotes ' something '".*

  - it: should not render an argo cron workflow when image.repository is null
    values:
      - ./values/cronjob/argo.yaml
    set:
      image:
        repository: ~
    asserts:
      - failedTemplate:
          errorMessage: image.repository must be provided

  - it: should not render an argo cron workflow when image.tag is null
    values:
      - ./values/cronjob/argo.yaml
    set:
      image:
        tag: ~
    asserts:
      - failedTemplate:
          errorMessage: image.tag must be provided

  - it: should render an argo cron workflow with minimal values
    values:
      - ./values/cronjob/argo_minimal.yaml
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: CronWorkflow

  - it: should not render an argo cron workflow when businessid is null
    values:
      - ./values/cronjob/argo_minimal.yaml
    set:
      businessid: ~
    asserts:
      - failedTemplate:
          errorMessage: businessid must be provided

  - it: should use workflowTemplateRef if enablePoMode is true
    values:
      - ./values/cronjob/argo.yaml
    set:
      enablePoMode: true
    asserts:
      - equal:
          path: spec.workflowSpec.workflowTemplateRef.name
          value: po-simple-cron-workflow
  
  - it: should not render arguments field when arguments is missing
    values:
      - ./values/cronjob/argo_minimal.yaml
    set:
      arguments: ~
    asserts:
      - notExists:
          path: spec.workflowSpec.arguments

  - it: should not render arguments field when arguments is missing
    values:
      - ./values/cronjob/argo_minimal.yaml
    set:
      arguments: 
        parameters:
          - name: message
            value: testing
    asserts:
      - equal:
          path: spec.workflowSpec.arguments
          value: 
            parameters:
              - name: message
                value: testing
