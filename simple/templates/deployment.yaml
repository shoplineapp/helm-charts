{{ include "resource_tag_checker" . }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    businessid: {{ $.Values.businessid | quote}}
    app: {{ .Values.name }}
spec:
  {{- if not (or .Values.hpa .Values.hpav2 ((.Values.KEDA).ScaledObject)) }}
  replicas: {{ .Values.replicaCount }}
  {{- end}}
  strategy:
  {{- if hasKey .Values.deployment "strategy" }}
    {{- toYaml .Values.deployment.strategy | nindent 4 }}
  {{- else}}
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  {{- end}}
  selector:
    matchLabels:
      app: {{ .Values.name }}
  template:
    metadata:
      {{- if hasKey .Values.deployment "annotations" }}
      annotations:
        {{- range $key, $value := .Values.deployment.annotations }}
          {{- if hasPrefix "compute_checksum::" $value }}
            {{- $path := replace "compute_checksum::" "" $value}}
            {{- $key | quote | nindent 8 }} : {{ include "compute_checksum" (dict "path" $path "Values" $.Values) | quote }}
          {{- else }}
            {{- $key | quote | nindent 8 }} : {{ $value | quote }}
          {{- end }}
        {{- end }}
      {{- end}}
      labels:
        businessid: {{ $.Values.businessid | quote}}
        app: {{ .Values.name }}
    spec:
      {{- if hasKey .Values "tolerations" }}
      tolerations:
        {{- toYaml .Values.tolerations | nindent 8 }}
      {{- end}}
      {{- if hasKey .Values "topologySpreadConstraints" }}
      topologySpreadConstraints:
        {{- toYaml .Values.topologySpreadConstraints | nindent 8 }}
      {{- else }}
      topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              app: {{ .Values.name }}
          maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
      {{- end}}
      {{- if hasKey .Values "nodeSelector" }}
      nodeSelector:
        {{ .Values.nodeSelector.labelName }}: {{ .Values.nodeSelector.labelValue }} 
      {{- end}}
      {{- if hasKey .Values "affinity" }}
      affinity:
        {{- if hasKey .Values.affinity "nodeAffinity" }}
        nodeAffinity: {{- toYaml .Values.affinity.nodeAffinity | nindent 10 }}
        {{- end }}
        {{- if hasKey .Values.affinity "podAffinity" }}
        podAffinity: {{- toYaml .Values.affinity.podAffinity | nindent 10 }}
        {{- end }}
        {{- if hasKey .Values.affinity "podAntiAffinity" }}
        podAntiAffinity: {{- toYaml .Values.affinity.podAntiAffinity | nindent 10 }}
        {{- end }}
      {{- end }}
      {{- if hasKey .Values "securityContextForPod" }}
      securityContext: {{ toYaml .Values.securityContextForPod | nindent 8 }}
      {{- end}}
      containers:
{{- if hasKey .Values.deployment "containers" }}
  {{- range .Values.deployment.containers }}
      - {{ template "deployment.container" . }}
  {{- end}}
{{- else}}
      - {{ template "deployment.container_legacy" .Values }}
{{- end}}
      {{- if hasKey .Values.deployment  "volumes" }}
      volumes:
        {{- range $key, $vol := $.Values.deployment.volumes }}
        - name: {{ $vol.name }}
          {{- if hasKey $vol "secret" }}
          secret:
            {{- toYaml $vol.secret | nindent 12 }}
          {{- end }}
          {{- if hasKey $vol "configMap" }}
          configMap:
            name: {{ $vol.name }}
            {{- if hasKey $vol.configMap "items" }}
            items: {{- toYaml $vol.configMap.items | nindent 12}}
            {{- end }}
          {{- end }}
        {{- end }}
      {{- end }}
      restartPolicy: Always
      {{- if .Values.serviceaccount}}
      serviceAccountName: {{ .Values.serviceaccount.name | default (printf "%s-pod-service-account" .Values.name) }}
      {{- end }}
      {{- if .Values.deployment.dnsConfig }}
      dnsConfig:
        {{- toYaml .Values.deployment.dnsConfig | nindent 8 }}
      {{- else }}
      dnsConfig:
        options:
          - name: ndots
            value: "2"
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.deployment.terminationGracePeriodSeconds | default "75" }}
