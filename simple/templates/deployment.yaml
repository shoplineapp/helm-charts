{{ include "simple.validateRequired" . }}
{{ include "simple.validatePVC" . }}
apiVersion: apps/v1
kind: Deployment
metadata:
  {{- include "simple.metadata" . | nindent 2 }}
spec:
  {{- if not (or .Values.hpa ((.Values.KEDA).ScaledObject)) }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  strategy:
  {{- if hasKey .Values.deployment "strategy" }}
    {{- toYaml .Values.deployment.strategy | nindent 4 }}
  {{- else}}
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  {{- end }}
  selector:
    matchLabels:
      app: {{ .Values.name }}
  template:
    metadata:
      {{- if hasKey .Values.deployment "annotations" }}
      annotations:
        {{- range $key, $value := .Values.deployment.annotations }}
          {{- if hasPrefix "compute_checksum::" $value }}
            {{- $path := replace "compute_checksum::" "" $value}}
            {{- $key | quote | nindent 8 }} : {{ include "simple.computeChecksum" (dict "path" $path "Values" $.Values) | quote }}
          {{- else }}
            {{- $key | quote | nindent 8 }} : {{ $value | quote }}
          {{- end }}
        {{- end }}
      {{- end }}
      labels:
        businessid: {{ $.Values.businessid | quote}}
        app: {{ .Values.name }}
    spec:
      {{- if hasKey .Values "tolerations" }}
      tolerations:
        {{- toYaml .Values.tolerations | nindent 8 }}
      {{- end }}
      {{- if and (hasKey .Values "topologySpreadConstraints") (not (empty .Values.topologySpreadConstraints)) }}
      topologySpreadConstraints:
        {{- toYaml .Values.topologySpreadConstraints | nindent 8 }}
      {{- else }}
      topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              app: {{ .Values.name }}
          maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
      {{- end }}
      {{- if hasKey .Values "nodeSelector" }}
      nodeSelector: {{- toYaml .Values.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if hasKey .Values "affinity" }}
      affinity:
        {{- if hasKey .Values.affinity "nodeAffinity" }}
        nodeAffinity: {{- toYaml .Values.affinity.nodeAffinity | nindent 10 }}
        {{- end }}
        {{- if hasKey .Values.affinity "podAffinity" }}
        podAffinity: {{- toYaml .Values.affinity.podAffinity | nindent 10 }}
        {{- end }}
        {{- if hasKey .Values.affinity "podAntiAffinity" }}
        podAntiAffinity: {{- toYaml .Values.affinity.podAntiAffinity | nindent 10 }}
        {{- end }}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext:
        {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      containers:
      {{- if hasKey .Values.deployment "containers" }}
      {{- range .Values.deployment.containers }}
        {{- include "deployment.container" . | nindent 6 }}
      {{- end }}
      {{- end }}
      {{- if hasKey .Values.deployment  "volumes" }}
      volumes: {{- toYaml .Values.deployment.volumes | nindent 8 }}
      {{- end }}
      restartPolicy: Always
      {{- if .Values.serviceaccount}}
      serviceAccountName: {{ .Values.serviceaccount.name | default (printf "%s-pod-service-account" .Values.name) }}
      {{- end }}
      {{- if .Values.deployment.dnsConfig }}
      dnsConfig:
        {{- toYaml .Values.deployment.dnsConfig | nindent 8 }}
      {{- else }}
      dnsConfig:
        options:
          - name: ndots
            value: "2"
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.deployment.terminationGracePeriodSeconds | default "75" }}
